import express from 'express';
import cors from 'cors';
import bodyParser from 'body-parser';
import fs from 'fs';
import dotenv from 'dotenv';
import pdf from 'pdf-parse';
import fileUploader from 'express-fileupload';
import OpenAI from 'openai';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import { google } from 'googleapis';
import { JWT } from 'google-auth-library'
import { GoogleSpreadsheet } from 'google-spreadsheet';
import creds from './credentials.json' with { type: "json" };
const app = express()

dotenv.config()
const PORT = 5000

const openai = new OpenAI({
    apiKey: process.env.REACT_APP_OPENAI_KEY // This is also the default, can be omitted
});




app.use(express.json());
app.use(fileUploader())
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }))
app.use(cors())

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const SCOPES = [
    'https://www.googleapis.com/auth/spreadsheets',
    'https://www.googleapis.com/auth/drive.file',
];

// Initialize auth - see https://theoephraim.github.io/node-google-spreadsheet/#/guides/authentication
const auth = new JWT({
    // env var values here are copied from service account credentials generated by google
    // see "Authentication" section in docs for more info
    email: creds.client_email,
    key: creds.private_key,
    scopes: SCOPES,
});


app.post("/summary", async function (req, res) {
    console.log('Hello Hre')
    let sampleFile;

    let tanong = req.body.prompt


    sampleFile = req.files.uploadedFile
    const uploadPath = path.join(__dirname, '/tmp/', sampleFile.name)

    console.log('upload path: ' + uploadPath)

    sampleFile.mv(uploadPath, async function (err) {

        console.log('it worked')

        let dataBuffer = fs.readFileSync(uploadPath);
        let response

        pdf(dataBuffer).then(async function (data) {
            const completion = await openai.chat.completions.create({
                messages: [{ "role": "system", "content": "You are a helpful assistant." },
                { "role": "user", "content": tanong + '\n\n' + data.text }],
                model: "gpt-3.5-turbo",
            });
            res.json({
                id: new Date().getTime(),
                text: completion.choices[0].message.content,
            });
        });
    });
    console.log('Hell 2')
});

app.post("/sheettest", async function (req, res) {

    // create a new doc

    // console.log("spreadsheet ID "+newDoc.spreadsheetId)

    // // share with specific users, domains, or make public
    // await newDoc.share('presidentmeth@gmail.com');
    // await newDoc.setPublicAccessLevel('reader');





    // const larryRow = await sheet.addRow({ name: 'Larry Page', email: 'larry@google.com' });
    // const moreRows = await sheet.addRows([
    //     { name: 'Sergey Brin', email: 'sergey@google.com' },
    //     { name: 'Eric Schmidt', email: 'eric@google.com' },
    // ]);

    // // read rows
    // const rows = await sheet.getRows(); // can pass in { limit, offset }

    // // read/write row values
    // console.log(rows[0].get('name')); // 'Larry Page'
    // rows[1].set('email', 'sergey@abc.xyz'); // update a value
    // rows[2].assign({ name: 'Sundar Pichai', email: 'sundar@google.com' }); // set multiple values
    // await rows[2].save(); // save updates on a row
    // await rows[2].delete(); // delete a row
    const floors = req.body.floors
    const project = req.body.project
    const isCreated = req.body.isCreated
    let factSheetID = req.body.factSheetID
    const existingFactSheetURL = req.body.factSheetURL

    console.log('Creating Sheet..')
    //create Building Surface
    const newDocBuildingSurface = await GoogleSpreadsheet.createNewSpreadsheetDocument(auth, { title: 'Building Surface' });
    const buildingSurfaceId = newDocBuildingSurface.spreadsheetId
    const doc = new GoogleSpreadsheet(buildingSurfaceId, auth);
    // await newDocBuildingSurface.share('presidentmeth@gmail.com');
    await newDocBuildingSurface.setPublicAccessLevel('reader');
    var url, url2, url3

    for (var i = 0; i < floors.length; i++) {
        const sheet = await doc.addSheet({ title: floors[i].floorName, headerValues: ['Part', 'Unit', 'Type', 'Area'] });


        for (var j = 0; j < floors[i].saleableArea.length; j++) {

            if (j == 0) {
                await sheet.addRow({ 'Part': 'Saleable Area', Unit: floors[i].saleableArea[j].saleableAreaUnitNumberTag, Type: floors[i].saleableArea[j].saleableAreaType, Area: floors[i].saleableArea[j].saleableAreaSize })
            } else {
                await sheet.addRow({ Unit: floors[i].saleableArea[j].saleableAreaUnitNumberTag, Type: floors[i].saleableArea[j].saleableAreaType, Area: floors[i].saleableArea[j].saleableAreaSize })
            }
        }

        for (var j = 0; j < floors[i].serviceArea.length; j++) {
            if (j == 0) {
                await sheet.addRow({ 'Part': 'Service Area', Unit: floors[i].serviceArea[j].serviceAreaUnitNumberTag, Type: floors[i].serviceArea[j].serviceAreaType, Area: floors[i].serviceArea[j].serviceAreaSize })
            }
            else {
                await sheet.addRow({ Unit: floors[i].serviceArea[j].serviceAreaUnitNumberTag, Type: floors[i].serviceArea[j].serviceAreaType, Area: floors[i].serviceArea[j].serviceAreaSize })
            }
        }

    }
    console.log('Building Surface Id: ' + buildingSurfaceId)
    url = `https://docs.google.com/spreadsheets/d/${buildingSurfaceId}/edit#gid=0}`;

    //create Technical Description
    const newDocTechnicalDesc = await GoogleSpreadsheet.createNewSpreadsheetDocument(auth, { title: 'Technical Description' });
    const TechnicalDescId = newDocTechnicalDesc.spreadsheetId
    const doc2 = new GoogleSpreadsheet(TechnicalDescId, auth);

    const sheet3 = await doc2.addSheet({ title: 'Technical Description', headerValues: ['Floor', 'Number', 'Name', 'Details', 'Annotations'] });
    // await newDocTechnicalDesc.share('presidentmeth@gmail.com',);
    await newDocTechnicalDesc.setPublicAccessLevel('reader');

    for (var i = 0; i < floors.length; i++) {

        for (var j = 0; j < floors[i].saleableArea.length; j++) {
            await sheet3.addRow({ Floor: floors[i].floorName })
            await sheet3.addRow({ 'Number': floors[i].saleableArea[j].saleableAreaUnitNumberTag })
            await sheet3.addRow({ Name: 'Unit Area:', Details: floors[i].saleableArea[j].saleableAreaSize })
            await sheet3.addRow({ Name: 'Building Use:', Details: floors[i].saleableArea[j].saleableAreaType })
            await sheet3.addRow({ Name: 'Location:', Details: floors[i].floorName + ', Address' })
            await sheet3.addRow({ Name: 'Owner/Developer:', Details: 'Anonymous Construction Company' })


        }


    }
    console.log('Technical Description Id: ' + TechnicalDescId)

    url2 = `https://docs.google.com/spreadsheets/d/${TechnicalDescId}/edit#gid=0}`;

    // if (!isCreated) {
    //create Fact Sheet
    const newDocFactSheet = await GoogleSpreadsheet.createNewSpreadsheetDocument(auth, { title: 'Fact Sheet' });
    const factSheetId = newDocFactSheet.spreadsheetId
    const doc3 = new GoogleSpreadsheet(factSheetId, auth);
    // await newDocFactSheet.share('presidentmeth@gmail.com');
    await newDocFactSheet.setPublicAccessLevel('reader');
    const sheet2 = await doc3.addSheet({ title: 'Fact Sheet', headerValues: ['FLOOR LOCATION', 'UNIT NO.', 'UNIT TYPE', 'REMARKS', 'PRICE/SQM', 'Area (m²)', 'Unit Price', '12% VAT', 'MISC. FEES', 'TOTAL CONTRACT PRICE'] });

    for (var i = 0; i < floors.length; i++) {



        for (var j = 0; j < floors[i].saleableArea.length; j++) {
            if (j == 0) {
                await sheet2.addRow({ 'FLOOR LOCATION': floors[i].floorName, 'UNIT NO.': 'UNIT ' + floors[i].saleableArea[j].saleableAreaUnitNumberTag, 'UNIT TYPE': '', 'REMARKS': '', 'PRICE/SQM': '', 'Area (m²)': floors[i].saleableArea[j].saleableAreaSize })
            } else {
                await sheet2.addRow({ 'FLOOR LOCATION': '', 'UNIT NO.': 'UNIT ' + floors[i].saleableArea[j].saleableAreaUnitNumberTag, 'UNIT TYPE': '', 'REMARKS': '', 'PRICE/SQM': '', 'Area (m²)': floors[i].saleableArea[j].saleableAreaSize })

            }
        }

    }
    console.log('Fact Sheet Id: ' + factSheetId)
    factSheetID = factSheetId
    url3 = `https://docs.google.com/spreadsheets/d/${factSheetId}/edit#gid=0}`;



    res.json({
        url: url,
        url2: url2,
        url3: url3,
        factSheetID: factSheetID
    });

})

app.post('/sheetupdate', async function (req, res) {
    const floors = req.body.floors
    const project = req.body.project
    const isCreated = req.body.isCreated
    let factSheetID = req.body.factSheetID
    const existingFactSheetURL = req.body.factSheetURL

    console.log('Updating Fact Sheet at ' + factSheetID)
    const newDocBuildingSurface = await GoogleSpreadsheet.createNewSpreadsheetDocument(auth, { title: 'Building Surface' });
    const buildingSurfaceId = newDocBuildingSurface.spreadsheetId
    const doc = new GoogleSpreadsheet(buildingSurfaceId, auth);
    await newDocBuildingSurface.setPublicAccessLevel('reader');
    var url, url2, url3
    const arrayColumn = []
    for (var i = 0; i < floors.length; i++) {
        for (var j = 0; j < floors[i].saleableArea.length; j++) {
            arrayColumn.push(floors[i].saleableArea[j].saleableAreaSize)

        }

    }
    const oldArray = [arrayColumn]

    const newArray = oldArray[0].map(item => [item]);
    console.log('Array Column :' + arrayColumn)
    const sheets = google.sheets('v4')
    sheets.spreadsheets.values.clear({
        auth: auth, spreadsheetId: factSheetID, range: "Fact Sheet!F2:F300"
    })
    sheets.spreadsheets.values.update({
        auth: auth, spreadsheetId: factSheetID, range: "Fact Sheet!F2:F300", valueInputOption: 'USER_ENTERED', resource: {
            values: newArray
        }
    })

    url = existingFactSheetURL

    res.json({
        url: url,

    });

})

app.listen(PORT, () => {
    console.log("Listening on port " + PORT);
});
